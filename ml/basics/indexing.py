'''
https://island-developer.tistory.com/69?category=799449
'''

import numpy as np

'''
np.arange: 특정 규칙에 따라 증가하는 수열

np.arange(10)  # 0 .. n-1
    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
​
np.arange(3, 21, 2)  # 시작, 끝(포함하지 않음), 단계
    array([ 3,  5,  7,  9, 11, 13, 15, 17, 19])

np.arange(10,1,-1)  # start: 10, end: 1, step: -1
    array([10, 9, 8, 7, 6, 5, 4, 3, 2])
'''

######################## 1차원 배열에 대한 정수 배열 인덱싱
#
x = np.arange(10, 1, -1)
print(x) 
#[10  9  8  7  6  5  4  3  2]

print(x[np.array([3, 3, 1, 8])])
#[7 7 9 2]

print(x[[3, 3, 1, 8]]) #리스트는 배열로 암묵적으로 변환가능하다. 즉 동일하다.
#[7 7 9 2]

print(x[np.array([3, 3, -1, 8])])   # minus index
#[7 7 4 2]

print(x[np.array([[1,1], [2,3]])])  # 1차원 배열 --> 다차원 배열로 인덱싱
#[[9 9]
# [8 7]]

######################## 다차원 배열에 대한 정수 배열 인덱싱
#
y = np.arange(35).reshape(5, 7)
print(y)
#[[ 0  1  2  3  4  5  6]
#[ 7  8  9 10 11 12 13]
#[14 15 16 17 18 19 20]
#[21 22 23 24 25 26 27]
#[28 29 30 31 32 33 34]]


print(y[np.array([0, 2, 4]), np.array([0, 1, 2])])
# == print(y[[0, 2, 4], [0, 1, 2]])

#[ 0 15 30] --> 0행 0열 / 2행 1열 / 4행 2열


print(y[np.array([[0, 1], [2, 3]]), np.array([[4, 5], [2, 3]])])
#[[ 4 12]  --> 0행 4열 / 1행 5열
# [16 24]] --> 2행 2열 / 3행 3열


print(y[np.array([0, 1, 4])])   # 원래 배열의 rank보다 적은 개수의 인덱스 배열을 사용하여 인덱싱할 수도 있다
#[[ 0  1  2  3  4  5  6]    --> 0+1행
# [ 7  8  9 10 11 12 13]    --> 1+1행
# [28 29 30 31 32 33 34]]   --> 4+1행
